1
1
%
TMS32010; Direct Paged Memory
  1542
1
1
%
TMS32010; Direct Paged Memory; Increased Precision
  9030
1
2
%
TMS32020; Direct Paged Memory
 16869
1
2
%
TMS32020; Direct Paged Memory; Increased Precision
 24100
1
2
%
TMS32020; Indexed Memory
 31878
1
2
%
TMS32020; Indexed Memory; Increased Precision
 39112
1
2
%
TMS32020; Index Memory; Looping Control
 46792
1
2
%
TMS32020; Indexed Memory; Looping Control; Increased Precision
 52773
2
1
%
TMS32010; Direct Paged Memory
 59049
2
2
%
TMS32020/c25; Indexed Memory; MACD realization
 63744
2
2
%
TMS32020/c25; Internal Direct Paged Memory
 68953
2
2
%
TMS32020/c25; Indexed Memory; Internal Delay Memory
 73360
2
2
%
TMS32020/c25; Indexed Memory; Internal or External Memory
 78519
3
1
%
TMS32010; Direct Paged Memory
 83425
3
2
%
TMS32020/c25; Indexed Memory; MACD realization
 88120
3
2
%
TMS32020/c25; Internal Direct Paged Memory
 93329
3
2
%
TMS32020/c25; Indexed Memory; Internal Delay Memory
 97737
3
2
%
TMS32020/c25; Indexed Memory; Internal or External Memory
102896
1
3
%
TMS320c25; Direct Paged Memory
107803
1
3
%
TMS320c25; Direct Paged Memory; Increased Precision
115041
1
3
%
TMS320c25; Indexed Memory
122814
1
3
%
TMS320c25; Indexed Memory; Increased Precision
130025
1
3
%
TMS320c25; Indexed Memory; Looping Control
137684
1
3
%
TMS320c25; Indexed Memory; Looping Control; Increased Precision
143651
>>>>
>>>
1
1
%
TMS32010; Direct Paged Memory
>>>
%batch_files 2  %	IDT	'%IDT%'		*Unique Identifier
%if option M%%else%	DEF	F%IDT%		*Name of filter subroutine
	DEF	I%IDT%		*Name of filter initialization subroutine
%endif%*************************************************
*    ASPI TMS32010 DIGITAL FILTER REALIZATION   *
*************************************************
*
*          %stages%-STAGE RECURSIVE FILTER
*            SECOND ORDER SECTIONS
*          FILTER GENERATED FROM FILE
%filter_file%
*************************************************
	PSEG
%if option M%%if main%%else%	B	START
	BSS	6
************************************************
*         ASPI CARD INITIALIZATION CODE        *
************************************************
START
	LDPK	IOPAGE		*SET PAGE POINTER
	SOVM			*SATURATION ARITHMETIC
	CALL	INIT		*INITIALIZE
************************************************
*                MAIN I/O LOOP                 *
************************************************
DOUT	EQU	6		*D/A OUTPUT
DIN	EQU	6		*A/D INPUT
*
* The following three instructions are used in conjunction
* with the PATCH program to indicate an idle state where no
* machine cycles are being used to preform filter operation
* (i.e. The time that location 4 is 1 could be used to do
* other useful things).  PATCH monitors location 4 to determine
* percetage utilization of the processor by the filter.
*
LPTS	LACK	1
	SACL	FILTT
	OUT	FILTT,4		*SIGNAL IDLE STATE
*
LPTSA	BIOZ	GET		*WAIT FOR CLOCK
	B	LPTSA		*BRANCH IF NO CLOCK
*
GET	OUT	VSAMPL,DOUT	*OUTPUT LAST OUTPUT
	IN	VSAMPL,DIN	*INPUT SAMPLE
*
* The following three instructions are used in conjuction
* with the PATCH program to indicate a busy state or that the
* filter is in operation.
*
	LACK	0		*GET CONSTANT FOR IDLE
	SACL	FILTT		*SAVE FOR OUTPUT
	OUT	FILTT,4		*SIGNAL BUSY STATE
*
* The following three instructions are used to determine whether
* or not the filter should be active.  In the non-active state the
* input data is simply passed to the output.  In the active state
* the input data is filtered, then passed to the output.
*
	IN	FILTT,5		*CHECK FOR ACTIVE STATE
	LAC	FILTT
	BNZ	LPTS		*NOT ACTIVE, PASS DATA THROUGH
*
	CALL	FILTER		*ACTIVE EXECUTE FILTER
	B	LPTS		*LOOP
%endif%%endif%*************************************************
*           DATA MEMORY DEFINITION              *
*************************************************
*     CONTAINS:
*          STORAGE FOR FILTER INPUT AND OUTPUT
*          STORAGE FOR COEFFICIENTS
*          STORAGE FOR DELAY ELEMENTS
*************************************************
*
* FILTER INPUT and OUTPUT STORAGE
*
%if option M%FILTT	EQU	0		*FILTER TEMPORY DATA
VSAMPL	EQU	1		*FILTER INPUT/OUTPUT DATA
IOPAGE	EQU	0
%else%	REF	FILTT,V%IDT%
%endif%*
COEF
* COEFFICIENT INITIALIZATION STORAGE AREA
*
%section%*
*  SECOND-ORDER SECTION # %section_n%
*
%if B0<%%else%	DATA	%B0%		*B0
%endif%%if B1<>%	DATA	%B1%		*B1
%endif%%if A1<%%else%	DATA	%A1%		*A1
%endif%%if half%%else%	DATA	%A2%		*A2
%if B2<%%else%	DATA	%B2%		*B2
%endif%%endif%%loop%*
	PEND
*
	CSEG	'X%IDT%'
* DELAY STORAGE DATA STORAGE AREA
*
DELAY	EQU	$
%section%Z%section_n%1	BSS	1
%if half%%else%Z%section_n%2	BSS	1
%endif%%loop%*
*
* COEFFICIENT DATA STORAGE AREA
*
FDATA	EQU	$
%section%*
%if B0<%%else%B%section_n%0	BSS	1	*B0
%endif%%if B1<>%B%section_n%1	BSS	1	*B1
%endif%%if A1<%%else%A%section_n%1	BSS	1	*A1
%endif%%if half%%else%A%section_n%2	BSS	1	*A2
%if B2<%%else%B%section_n%2	BSS	1	*B2
%endif%%endif%%loop%*
*
	CEND
*
	PSEG
*************************************************
*       FILTER INITIALIZATION SUBROUTINE        *
*************************************************
%if option M%INIT%else%I%IDT%%endif%	LACK	1		*GET A 1
	SACL	FILTT		*TEMPORARY SAVE
	LT	FILTT		*LOAD 1 IN T
	MPYK	COEF
	PAC			*AC POINTS TO COEF DATA
	MPYK	1		*1 INTO P
	LARK	0,FDATA		*POINTER TO DATA MEMORY
%if data%	LARK	1,%points%		*COUNT FOR NUMBER OF POINTS
ILP	LARP	0		*RESET AR TO 0
	TBLR	*+,1		*TRANSFER DATA VALUE
	APAC			*INCREMENT POINTER
	BANZ	ILP		*LOOP
%endif%	LARK	1,%ndelay%		*NUMBER OF DELAY POINTS
	ZAC			*CLEAR ACCUMULATOR
	LARK	0,Z011		*POINT TO DELAY MEMORY
ILPA	LARP	0		*RESET AR TO 0
	SACL	*+,0,1		*CLEAR DATA VALUE
	BANZ	ILPA		*LOOP
	RET			*INIT RETURN
*************************************************
*              FILTER SUBROUTINE                *
*************************************************
*   ASSUMPTIONS:
*      SATURATION ARITHMETIC MODE IS ON
*      PAGE REGISTER IS SET TO COEF. PAGE
*
*   INPUT:    %if option M%VSAMPL%else%V%IDT%%endif%
*   OUTPUT:   %if option M%VSAMPL%else%V%IDT%%endif%
*
*************************************************
%if option M%FILTER%else%F%IDT%%endif%
%section%*
* SECOND-ORDER FILTER SECTION # %section_n%
*
%filtin%%if half%	LT	FILTT		*GET SCALED INPUT
%if B0<%	MPYK	%B0%		*P = (B0 * INPUT)/2
%else%	MPY	B%section_n%0		*P = (B0 * INPUT)/2
%endif%	ZALH	Z%section_n%1
	ADDH	Z%section_n%1		*AC = Z-1
%if B1<>%	APAC
	APAC			*AC = Z-1 + (B0 * INPUT)
	MPY	B%section_n%1		*P = (B1 * INPUT)/2
%else%	APAC
	APAC			*AC = Z-1 + (B0 * INPUT)
%endif%	SACH	%if option M%VSAMPL%else%V%IDT%%endif%		*Save in OUTPUT
%if B1<>%	PAC
%endif%	LT	%if option M%VSAMPL%else%V%IDT%%endif%%if B1<>%		*AC = (B1 * INPUT)/2%endif%
%if A1<%	MPYK	%A1%		*P = (A1 * OUTPUT)/2
%else%	MPY	A%section_n%1		*P = (A1 * OUTPUT)/2
%endif%	%if B1<>%A%endif%PAC			*AC = ((B1 * INPUT) + (A1 * OUTPUT))/2
%if A1shft%	APAC
%endif%	SACH	Z%section_n%1		*Save in Z-1
%else 

%%if B1<>%	LT	FILTT		*GET SCALED INPUT
%if B0<%	MPYK	%B0%		*P = (B0 * INPUT)/2
%else%	MPY	B%section_n%0		*P = (B0 * INPUT)/2
%endif%	ZALH	Z%section_n%1
	ADDH	Z%section_n%1		*AC = Z-1
	APAC
	APAC				*AC = Z-1 + (B0 * INPUT)
	MPY	B%section_n%1			*P = (B1 * INPUT)/2
	SACH	%if option M%VSAMPL%else%V%IDT%%endif%		*Save in OUTPUT
	PAC
	LT	%if option M%VSAMPL%else%V%IDT%%endif%		*AC = (B1 * INPUT)/2
	ADDH	Z%section_n%2		*AC = (Z-2 + (B1 * INPUT))/2
%if A1<%	MPYK	%A1%		*P = (A1 * OUTPUT)/2
%else%	MPY	A%section_n%1		*P = (A1 * OUTPUT)/2
%endif%%if A1shft%	APAC
%endif%	APAC			*AC = (Z-2 + (B1 * INPUT) + (A1 * OUTPUT))/2
	MPY	A%section_n%2		*P = (A2 * OUTPUT)/2
	SACH	Z%section_n%1		*Save in Z-1
	PAC			*AC = A2 * OUTPUT
	LT	FILTT
%if B2<%	MPYK	%B2%		*P = (B2 * INPUT)/2
%else%	MPY	B%section_n%2		*P = (B2 * INPUT)/2
%endif%	APAC			*AC = ((B2 * INPUT) + (A2 * OUTPUT))/2
 	SACH	Z%section_n%2	*Save in Z-2
%else 


%	LT	FILTT		*GET SCALED INPUT
%if B0<%	MPYK	%B0%		*P = (B0 * INPUT)/2
%else%	MPY	B%section_n%0		*P = (B0 * INPUT)/2
%endif%	ZALH	Z%section_n%1
	ADDH	Z%section_n%1		*AC = Z-1
	APAC
	APAC			*AC = Z-1 + (B0 * INPUT)
	SACH	%if option M%VSAMPL%else%V%IDT%%endif%		*Save in OUTPUT
	LT	%if option M%VSAMPL%else%V%IDT%%endif%		*Get OUTPUT
	ZALH	Z%section_n%2		*AC = (Z-2)/2
%if A1<%	MPYK	%A1%		*P = (A1 * OUTPUT)/2
%else%	MPY	A%section_n%1		*P = (A1 * OUTPUT)/2
%endif%%if A1shft%	APAC
%endif%	APAC
	MPY	A%section_n%2		*AC = ((B1 * INPUT) + (A1 * OUTPUT))/2
*				*P = (A2 * OUTPUT)/2
	SACH	Z%section_n%1	*Save in Z-1
	PAC		*AC = A2 * OUTPUT
	LT	FILTT
%if B2<%	MPYK	%B2%		*P = (B2 * INPUT)/2
%else%	MPY	B%section_n%2		*P = (B2 * INPUT)/2
%endif%	APAC			*AC = ((B2 * INPUT) + (A2 * OUTPUT))/2
 	SACH	Z%section_n%2	*Save in Z-2
%endif%%endif%%loop%*
	RET			*RETURN
	PEND
	END
%end%
>>>>
>>>
1
1
%
TMS32010; Direct Paged Memory; Increased Precision
>>>
%batch_files 2  %	IDT	'%IDT%'		*Unique Identifier
%if option M%%else%	DEF	F%IDT%		*Name of filter subroutine
	DEF	I%IDT%		*Name of filter initialization subroutine
%endif%*************************************************
*    ASPI TMS32010 DIGITAL FILTER REALIZATION   *
*************************************************
*       INCREASED PRECISION IMPLEMENTATION
*
*          %stages%-STAGE RECURSIVE FILTER
*            SECOND ORDER SECTIONS
*          FILTER GENERATED FROM FILE
%filter_file%
*************************************************
	PSEG
%if option M%%if main%%else%	B	START
	BSS	6
************************************************
*         ASPI CARD INITIALIZATION CODE        *
************************************************
START
	LDPK	IOPAGE		*SET PAGE POINTER
	SOVM			*SATURATION ARITHMETIC
	CALL	INIT		*INITIALIZE
************************************************
*                MAIN I/O LOOP                 *
************************************************
DOUT	EQU	6		*D/A OUTPUT
DIN	EQU	6		*A/D INPUT
*
* The following three instructions are used in conjunction
* with the PATCH program to indicate an idle state where no
* machine cycles are being used to preform filter operation
* (i.e. The time that location 4 is 1 could be used to do
* other useful things).  PATCH monitors location 4 to determine
* percetage utilization of the processor by the filter.
*
LPTS	LACK	1
	SACL	FILTT
	OUT	FILTT,4		*SIGNAL IDLE STATE
*
LPTSA	BIOZ	GET		*WAIT FOR CLOCK
	B	LPTSA		*BRANCH IF NO CLOCK
*
GET	OUT	VSAMPL,DOUT	*OUTPUT LAST OUTPUT
	IN	VSAMPL,DIN	*INPUT SAMPLE
*
* The following three instructions are used in conjuction
* with the PATCH program to indicate a busy state or that the
* filter is in operation.
*
	LACK	0		*GET CONSTANT FOR IDLE
	SACL	FILTT		*SAVE FOR OUTPUT
	OUT	FILTT,4		*SIGNAL BUSY STATE
*
* The following three instructions are used to determine whether
* or not the filter should be active.  In the non-active state the
* input data is simply passed to the output.  In the active state
* the input data is filtered, then passed to the output.
*
	IN	FILTT,5		*CHECK FOR ACTIVE STATE
	LAC	FILTT
	BNZ	LPTS		*NOT ACTIVE, PASS DATA THROUGH
*
	CALL	FILTER		*ACTIVE EXECUTE FILTER
	B	LPTS		*LOOP
%endif%%endif%*************************************************
*           DATA MEMORY DEFINITION              *
*************************************************
*     CONTAINS:
*          STORAGE FOR FILTER INPUT AND OUTPUT
*          STORAGE FOR COEFFICIENTS
*          STORAGE FOR DELAY ELEMENTS
*************************************************
*
* FILTER INPUT and OUTPUT STORAGE
*
%if option M%FILTT	EQU	0		*FILTER TEMPORY DATA
VSAMPL	EQU	1		*FILTER INPUT/OUTPUT DATA
IOPAGE	EQU	0
%else%	REF	FILTT,V%IDT%
%endif%*
COEF
* COEFFICIENT INITIALIZATION STORAGE AREA
*
%section%*
*  SECOND-ORDER SECTION # %section_n%
*
%if B0<%%else%	DATA	%B0%		*B0
%endif%%if B1<>%	DATA	%B1%		*B1
%endif%%if A1<%%else%	DATA	%A1%		*A1
%endif%%if half%%else%	DATA	%A2%		*A2
%if B2<%%else%	DATA	%B2%		*B2
%endif%%endif%%loop%*
	PEND
*
	CSEG	'X%IDT%'
* DELAY STORAGE DATA STORAGE AREA
*
DELAY	EQU	$
%section%Z%section_n%1	BSS	1
L%section_n%1	BSS	1
%if half%%else%Z%section_n%2	BSS	1
L%section_n%2	BSS	1
%endif%%loop%*
*
* COEFFICIENT DATA STORAGE AREA
*
FDATA	EQU	$
%section%*
%if B0<%%else%B%section_n%0	BSS	1	*B0
%endif%%if B1<>%B%section_n%1	BSS	1	*B1
%endif%%if A1<%%else%A%section_n%1	BSS	1	*A1
%endif%%if half%%else%A%section_n%2	BSS	1	*A2
%if B2<%%else%B%section_n%2	BSS	1	*B2
%endif%%endif%%loop%*
*
	CEND
*
	PSEG
*************************************************
*       FILTER INITIALIZATION SUBROUTINE        *
*************************************************
%if option M%INIT%else%I%IDT%%endif%	LACK	1		*GET A 1
	SACL	FILTT		*TEMPORARY SAVE
	LT	FILTT		*LOAD 1 IN T
	MPYK	COEF
	PAC			*AC POINTS TO COEF DATA
	MPYK	1		*1 INTO P
	LARK	0,FDATA		*POINTER TO DATA MEMORY
%if data%	LARK	1,%points%		*COUNT FOR NUMBER OF POINTS
ILP	LARP	0		*RESET AR TO 0
	TBLR	*+,1		*TRANSFER DATA VALUE
	APAC			*INCREMENT POINTER
	BANZ	ILP		*LOOP
%endif%	LARK	1,%ndelay%+%ndelay%+1		*NUMBER OF DELAY POINTS
	ZAC			*CLEAR ACCUMULATOR
	LARK	0,Z011		*POINT TO DELAY MEMORY
ILPA	LARP	0		*RESET AR TO 0
	SACL	*+,0,1		*CLEAR DATA VALUE
	BANZ	ILPA		*LOOP
	RET			*INIT RETURN
*************************************************
*              FILTER SUBROUTINE                *
*************************************************
*   ASSUMPTIONS:
*      SATURATION ARITHMETIC MODE IS ON
*      PAGE REGISTER IS SET TO COEF. PAGE
*
*   INPUT:    %if option M%VSAMPL%else%V%IDT%%endif%
*   OUTPUT:   %if option M%VSAMPL%else%V%IDT%%endif%
*
*************************************************
%if option M%FILTER%else%F%IDT%%endif%
%section%*
* SECOND-ORDER FILTER SECTION # %section_n%
*
%filtin%%if half%	LT	FILTT		*GET SCALED INPUT
%if B0<%	MPYK	%B0%		*P = (B0 * INPUT)/2
%else%	MPY	B%section_n%0		*P = (B0 * INPUT)/2
%endif%	ZALH	Z%section_n%1
	ADDS	L%section_n%1
	ADDH	Z%section_n%1
	ADDS	L%section_n%1		*AC = Z-1
%if B1<>%	APAC
	APAC			*AC = Z-1 + (B0 * INPUT)
	MPY	B%section_n%1		*P = (B1 * INPUT)/2
%else%	APAC
	APAC			*AC = Z-1 + (B0 * INPUT)
%endif%	SACH	%if option M%VSAMPL%else%V%IDT%%endif%		*Save in OUTPUT
%if B1<>%	PAC
%endif%	LT	%if option M%VSAMPL%else%V%IDT%%endif%%if B1<>%		*AC = (B1 * INPUT)/2%endif%
%if A1<%	MPYK	%A1%		*P = (A1 * OUTPUT)/2
%else%	MPY	A%section_n%1		*P = (A1 * OUTPUT)/2
%endif%	%if B1<>%A%endif%PAC			*AC = ((B1 * INPUT) + (A1 * OUTPUT))/2
%if A1shft%	APAC
%endif%	SACH	Z%section_n%1		*Save in Z-1
	SACL	L%section_n%1
%else 

%%if B1<>%	LT	FILTT		*GET SCALED INPUT
%if B0<%	MPYK	%B0%		*P = (B0 * INPUT)/2
%else%	MPY	B%section_n%0		*P = (B0 * INPUT)/2
%endif%	ZALH	Z%section_n%1
	ADDS	L%section_n%1
	ADDH	Z%section_n%1
	ADDS	L%section_n%1		*AC = Z-1
	APAC
	APAC				*AC = Z-1 + (B0 * INPUT)
	MPY	B%section_n%1			*P = (B1 * INPUT)/2
	SACH	%if option M%VSAMPL%else%V%IDT%%endif%		*Save in OUTPUT
	PAC
	LT	%if option M%VSAMPL%else%V%IDT%%endif%		*AC = (B1 * INPUT)/2
	ADDH	Z%section_n%2
	ADDS	L%section_n%2		*AC = (Z-2 + (B1 * INPUT))/2
%if A1<%	MPYK	%A1%		*P = (A1 * OUTPUT)/2
%else%	MPY	A%section_n%1		*P = (A1 * OUTPUT)/2
%endif%%if A1shft%	APAC
%endif%	APAC			*AC = (Z-2 + (B1 * INPUT) + (A1 * OUTPUT))/2
	MPY	A%section_n%2		*P = (A2 * OUTPUT)/2
	SACH	Z%section_n%1		*Save in Z-1
	SACL	L%section_n%1
	PAC			*AC = A2 * OUTPUT
	LT	FILTT
%if B2<%	MPYK	%B2%		*P = (B2 * INPUT)/2
%else%	MPY	B%section_n%2		*P = (B2 * INPUT)/2
%endif%	APAC			*AC = ((B2 * INPUT) + (A2 * OUTPUT))/2
 	SACH	Z%section_n%2	*Save in Z-2
	SACL	L%section_n%2
%else 


%	LT	FILTT		*GET SCALED INPUT
%if B0<%	MPYK	%B0%		*P = (B0 * INPUT)/2
%else%	MPY	B%section_n%0		*P = (B0 * INPUT)/2
%endif%	ZALH	Z%section_n%1
	ADDS	L%section_n%1
	ADDH	Z%section_n%1
	ADDS	L%section_n%1		*AC = Z-1
	APAC
	APAC			*AC = Z-1 + (B0 * INPUT)
	SACH	%if option M%VSAMPL%else%V%IDT%%endif%		*Save in OUTPUT
	LT	%if option M%VSAMPL%else%V%IDT%%endif%		*Get OUTPUT
	ZALH	Z%section_n%2
	ADDS	L%section_n%2		*AC = (Z-2)/2
%if A1<%	MPYK	%A1%		*P = (A1 * OUTPUT)/2
%else%	MPY	A%section_n%1		*P = (A1 * OUTPUT)/2
%endif%%if A1shft%	APAC
%endif%	APAC			*AC = ((B1 * INPUT) + (A1 * OUTPUT) + Z-2)/2
	MPY	A%section_n%2		*P = (A2 * OUTPUT)/2
	SACH	Z%section_n%1	*Save in Z-1
	SACL	L%section_n%1
	PAC		*AC = A2 * OUTPUT
	LT	FILTT
%if B2<%	MPYK	%B2%		*P = (B2 * INPUT)/2
%else%	MPY	B%section_n%2		*P = (B2 * INPUT)/2
%endif%	APAC			*AC = ((B2 * INPUT) + (A2 * OUTPUT))/2
 	SACH	Z%section_n%2	*Save in Z-2
	SACL	L%section_n%2
%endif%%endif%%loop%*
	RET			*RETURN
	PEND
	END
%end%
>>>>
>>>


