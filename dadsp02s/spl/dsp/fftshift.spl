/*****************************************************************************
*                                                                            *
*   FFTSHIFT.SPL Copyright (C) 1997-2005 DSP Development Corporation         *
*                           All Rights Reserved                              *
*                                                                            *
*   Author:      Randy Race                                                  *
*                                                                            *
*   Synopsis:    Flips FFT so zero frequency is the middle point             *
*                                                                            *
*   Revisions:   18 Aug 1997  RRR  Creation                                  *
*                21 Jan 1998  RRR  Odd length fixup for rows                 *
*                 8 Jul 1999  RRR  don't reverse halves                      *
*                19 May 2000  RRR  optimize buffering for arrays             *
*                 9 Feb 2005  RRR  buffering now internally optimized        *
*                                                                            *
*****************************************************************************/

#include <series.h>

#if @HELP_FFTSHIFT

    FFTSHIFT

    Purpose: Shifts a 1D or 2D FFT so the 0 frequency is the midpoint
                                                                        
    Format:  FFTSHIFT(ser)

              ser - a complex series or array 

    Returns: A series or array

    Example:
             W1: {1, 2, 3, 2, 1}
             W2: Fft(W1)
             W3: Fftshift(W2)

             The zero frequency (i.e. DC) value of W2 is the first point.
             The zero frequency of W3 is the 3rd point and appears in the
             middle of the resulting graph.

    Remarks:
             Fftshift also works on 2D FFT array.


    See Also
             Fft
             Fft2

#endif


/* shift mid point of series or array */
fftshift(s)
{
	local rmid, rodd, cmid, codd, t;
	local nr, nc, r1, r2, c1, c2, bufsize;

	/* numrows and numcols */
	(nr, nc) = size(s);

	/* get row midpoints */
	rmid = ceil(nr/2);
	rodd = nr % 2;

	if (nc > 1) { /* array */
		/* get col midpoints */
		cmid = ceil(nc/2 + 1);
		codd = (nc % 2);

		/* array indices */
		r1 = (rmid+1)..nr;
		r2 = 1..rmid;
		c1 = cmid..nc;
		c2 = 1..(cmid-1);

#if 0
		/* optimize buffering */
		bufsize = setbufsize(nr);
#endif

		/* flip rows and columns in one operation */
		t = {ravel(s[r1, c1], s[r1, c2]), ravel(s[r2, c1], s[r2, c2])};

#if 0
		/* restore buffer size */
		setbufsize(bufsize);
#endif

		/* fixup offset for even or odd columns */
		setdeltay(t, deltay(s));
		setyoffset(t, yoffset(s)+((codd-nc)/2)*deltay(t));
	}
	else { /* series */
		/* flip each half of all the rows */
		t = concat(extract(s, rmid+1, -1), extract(s, 1, rmid));
	}

	/* fixup offset for even or odd rows */
	setdeltax(t, deltax(s));
	setxoffset(t, xoffset(s)+((rodd-nr)/2)*deltax(t));

	return(t);
}

