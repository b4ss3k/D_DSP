!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                                                                            !
!                                CURSOR.MAC                                  !
!                                                                            !
!                               April 4, 1995                                !
!                                                                            !
!  Macros for computing cursor positions and separations, and for zooming,   !
!  series processing, point extraction, point replacement, subseries         !
!  extraction, and subseries replacement, all using the cursor.              !
!                                                                            !
!  		   Copyright (C) 1995 DSP Development Corp.                  !
!                                                                            !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!**********************************************************************!
!                                                                      !
!			 BASIC CURSOR MACROS			       !
!                                                                      !
!**********************************************************************!

!-----------------------------------------------------------------------
!
! LEFTC is the cursor position of whichever cursor is at the left.
!
!     WIN = window with both cursors active

LEFTC(WIN)		FLOOR(MIN(GSER(CURPOS(WIN),CURPOS2(WIN))))

!-----------------------------------------------------------------------
!
! RIGHTC is the cursor position of whichever cursor is at the right.
!
!     WIN = window with both cursors active

RIGHTC(WIN)		FLOOR(MAX(GSER(CURPOS(WIN),CURPOS2(WIN))))

! LEFTCUR is the cursor position of whichever cursor is at the left for 
!         the current window.

LEFTCUR			FLOOR(MIN(GSER(CURPOS,CURPOS2)))

!-----------------------------------------------------------------------
!
! RIGHTCUR is the cursor position of whichever cursor is at the right
!		  for the current window.

RIGHTCUR		FLOOR(MAX(GSER(CURPOS,CURPOS2)))

!-----------------------------------------------------------------------
!
! DISTC is the positive distance in number of points between the two
! cursors.
!
!     WIN = window with both cursors active

DISTC(WIN)		FLOOR(ABS(CURPOS(WIN)-CURPOS2(WIN)))

!-----------------------------------------------------------------------
!
! DELTC is the signed distance in number of points from the first
! cursor to the second cursor.
!
!     WIN = window with both cursors active

DELTC(WIN)		CURPOS2(WIN)-CURPOS(WIN)

!-----------------------------------------------------------------------
!
! DISTXC is the positive distance in x units between the two cursors.
!
!     WIN = window with both cursors active

DISTXC(WIN)		ABS(CURPOS(WIN)-CURPOS2(WIN))*DELTAX(WIN)

!-----------------------------------------------------------------------
!
! DELTXC is the signed distance in x units from the first cursor to the
! second cursor.
!
!     WIN = window with both cursors active

DELTXC(WIN)		(CURPOS2(WIN)-CURPOS(WIN))*DELTAX(WIN)

!**********************************************************************!
!                                                                      !
!			 CURSOR-BASED ZOOMING			       !
!                                                                      !
!**********************************************************************!

!-----------------------------------------------------------------------
!
! ZOOMC expands the plotted region of a window to the region between
! the two cursors in the window.  No data is lost; only the plot region
! is changed.  UNZOOMC undoes the effect.

ZOOMC                   SETX(DELTAX(CURR)*(LEFTCUR-1)+XOFFSET,DELTAX(CURR)*(RIGHTCUR-1)+XOFFSET(CURR))

!-----------------------------------------------------------------------
!
! UNZOOMC displays the entire window after a portion of it has been
! displayed.

UNZOOMC                 SETX(XOFFSET(CURR),DELTAX(CURR)*(LENGTH(CURR)-1)+XOFFSET(CURR))

!**********************************************************************!
!                                                                      !
!                    CURSOR-BASED SERIES PROCESSING                    !
!                                                                      !
!**********************************************************************!

!-----------------------------------------------------------------------
!
! EXTRACTC extracts a portion of a window between the two cursors in
! the window.  Both of the points on which the cursors are resting are
! included.  The window may be the current series.
!
!     WIN = window to be extracted from

EXTRACTC(WIN)		EXTRACT(WIN,LEFTC(WIN),DISTC(WIN)+1)

!-----------------------------------------------------------------------
!
! DELETEC erases a portion of a window between the two cursors in the
! window.  Both of the points on which the cursors are resting are
! deleted.  The window may be the current series.
!
!     WIN = window to be partially deleted

DELETEC(WIN)		CONCAT(EXTRACT(WIN,1,LEFTC(WIN)-1),EXTRACT(WIN,RIGHTC(WIN)+1,LENGTH(WIN)-RIGHTC(WIN)))

!-----------------------------------------------------------------------
!
! INSERTC inserts a series just after the position of the first cursor
! in a window.  The second cursor is ignored, and if the series to be
! inserted is a window, its cursors are ignored.
!
!     WIN = window to be inserted into
!     SER = series to be inserted

INSERTC(WIN,SER)	CONCAT(EXTRACT(WIN,1,CURPOS(WIN)),SER,EXTRACT(WIN,CURPOS(WIN)+1,LENGTH(WIN)-CURPOS(WIN)))

!-----------------------------------------------------------------------
!
! SUBSTC substitutes a series for the portion of a window between its
! two cursors.  In other words, it is a delete followed by an
! insertion.  Both of the points on which the cursors are resting are
! deleted.  If the series to be substituted is a window, its cursors
! are ignored.
!
!     WIN = window to be substituted into
!     SER = series to be substituted

SUBSTC(WIN,SER)		CONCAT(EXTRACT(WIN,1,LEFTC(WIN)-1),SER,EXTRACT(WIN,RIGHTC(WIN)+1,LENGTH(WIN)-RIGHTC(WIN)))

!-----------------------------------------------------------------------
!
! INSERTCC takes the portion of a window between its two cursors and
! inserts it in another window just after the position of the first
! cursor.  The second cursor in the target window is ignored.
!
!     WIN1 = target window to be inserted into
!     WIN2 = source window containing portion to be inserted

INSERTCC(WIN1,WIN2)	CONCAT(EXTRACT(WIN1,1,CURPOS(WIN1)),EXTRACT(WIN2,LEFTC(WIN2),DISTC(WIN2)+1),EXTRACT(WIN1,CURPOS(WIN1)+1,LENGTH(WIN1)-CURPOS(WIN1)))

!-----------------------------------------------------------------------
!
! SUBSTCC takes the portion of a window between its two cursors and
! substitutes it into another window for the portion between its two
! cursors.  In other words, it is a delete of a cursor region followed
! by an insertion of another cursor region.  In the target window, both
! of the points on which the cursors are resting are deleted, and in
! the source window, both the points on which the cursors are resting
! are copied.
!
!     WIN1 = target window containing portion to be substituted into
!     WIN2 = source window containing portion to be substituted

SUBSTCC(WIN1,WIN2)	CONCAT(EXTRACT(WIN1,1,LEFTC(WIN1)-1),EXTRACT(WIN2,LEFTC(WIN2),DISTC(WIN2)+1),EXTRACT(WIN1,RIGHTC(WIN1)+1,LENGTH(WIN1)-RIGHTC(WIN1)))

!**********************************************************************!
!                                                                      !
!		    CURSOR-BASED POINT EXTRACTION		       !
!                                                                      !
!**********************************************************************!

!-----------------------------------------------------------------------
!
! Point-extraction macros create a new series one point at a time using
! the cursor.  The point value at the cursor of the source window is 
! appended to the destination window.
!
! To use:
!
!     1. Depending on whether you are using the H, V, P, N, or Z macro,
!        go to the destination window and type the appropriate INIT
!        command: for example, to use H, type INITH("Ws"), where Ws is
!        the source window.  The window reference must be enclosed in
!        quotes.
!
!     2. Move to the source window and type H, V, P, N, or Z.
!
!     3. Move the cursor to the desired point and press ENTER to save
!        that point to the destination window.
!
!     4. Repeat steps 2 and 3 for as many points as you wish.

!-----------------------------------------------------------------------
!
! INITH is used to initialize source and destination windows for use
! with the point generation macro H.  See directions above and the
! desription of H.
!
!     SWIN = source window reference in quotes

INITH(SWIN)             DEFMACRO("PPOS",1,-1)|DEFMACRO("SER1",SWIN,-1)|DEFMACRO("SER2",STRCAT('W',STRNUM(GETWNUM)),-1)|GSER(0.)

!-----------------------------------------------------------------------
!
! H, when used after INITH, generates a window point by point, using
! the cursor from a source window.  Each point in the destination
! window consists of the x coordinate of the point selected in the
! source window.  See the directions above.

H                       ECHO("Move cursor to desired point and press ENTER ...")|CURSORON|MOVETO(SER2)|EVAL("SETPT(SER2,(CURPOS(SER1)-1)*DELTAX(SER1)+XOFFSET(SER1),PPOS)")|DEFMACRO("PPOS",PPOS+1,-1)|MOVETO(SER1)

!-----------------------------------------------------------------------
!
! INITV is used to initialize source and destination windows for use
! with the point generation macro V.  See directions above and the
! desription of V.
!
!     SWIN = source window reference in quotes

INITV(SWIN)             DEFMACRO("PPOS",1,-1)|DEFMACRO("SER1",SWIN,-1)|DEFMACRO("SER2",STRCAT('W',STRNUM(GETWNUM)),-1)|GSER(0.)

!-----------------------------------------------------------------------
!
! V, when used after INITV, generates a window point by point, using
! the cursor from a source window.  Each point in the destination
! window consists of the y coordinate of the point selected in the
! source window.  See the directions above.

V                       ECHO("Move cursor to desired point and press ENTER ...")|CURSORON|MOVETO(SER2)|EVAL("SETPT(SER2,GETPT(SER1,CURPOS(SER1)),PPOS)")|DEFMACRO("PPOS",PPOS+1,-1)|MOVETO(SER1)

!-----------------------------------------------------------------------
!
! INITP is used to initialize source and destination windows for use
! with the point generation macro P.  See directions above and the
! desription of P.
!
!     SWIN = source window reference in quotes

INITP(SWIN)             DEFMACRO("PPOS",1,-1)|DEFMACRO("SER1",SWIN,-1)|DEFMACRO("SER2",STRCAT('W',STRNUM(GETWNUM)),-1)|XY(GSER(0.),GSER(0.))

!-----------------------------------------------------------------------
!
! P, when used after INITP, generates an XY window point by point,
! using the cursor from a source window.  Each point in the destination
! XY window consists of the x and y coordinates of the point selected
! in the source window.  See the directions above.

P                       ECHO("Move cursor to desired point and press ENTER ...")|CURSORON|MOVETO(SER2)|EVAL("XY(SETPT(XVALS(SER2),(CURPOS(SER1)-1)*DELTAX(SER1)+XOFFSET(SER1),PPOS),SETPT(YVALS(SER2),GETPT(SER1,CURPOS(SER1)),PPOS))")|DEFMACRO("PPOS",PPOS+1,-1)|MOVETO(SER1)

!-----------------------------------------------------------------------
!
! INITN is used to initialize source and destination windows for use
! with the point generation macro N.  See directions above and the
! desription of N.
!
!     SWIN = source window reference in quotes

INITN(SWIN)             DEFMACRO("PPOS",1,-1)|DEFMACRO("SER1",SWIN,-1)|DEFMACRO("SER2",STRCAT('W',STRNUM(GETWNUM)),-1)|TABLEVIEW

!-----------------------------------------------------------------------
!
! N, when used after INITN, generates a 2-column matrix, one row for
! each point, using the cursor to specify a point from a source window. 
! The first column in the matrix is the point number (index) of the
! point from the source window; the second column is the y value of the
! source point.  See the directions above.

N                       ECHO("Move cursor to desired point and press ENTER ...")|CURSORON|MOVETO(SER2)|EVAL("NBUILD(PPOS==1,GSERIES(CURPOS(SER1),GETPT(SER1,CURPOS(SER1))))")|DEFMACRO("PPOS",PPOS+1,-1)|MOVETO(SER1)
NBUILD(COND,SER)	IF(COND,TRANSPOSE(SER),CONCAT(CURR,TRANSPOSE(SER)))

!-----------------------------------------------------------------------
!
! INITZ is used to initialize source and destination windows for use
! with the point generation macro Z.  See directions above and the
! desription of Z.
!
!     SWIN = source window reference in quotes

INITZ(SWIN)             DEFMACRO("PPOS",1,-1)|DEFMACRO("SER1",SWIN,-1)|DEFMACRO("SER2",STRCAT('W',STRNUM(GETWNUM)),-1)|TABLEVIEW

!-----------------------------------------------------------------------
!
! Z, when used after INITZ, generates a 3-column matrix, one row for
! each point, using the cursor to specify a point from a source window. 
! The first column in the matrix is the point number (index) of the
! point from the source window; the second column is the x value of the
! source point; and the third column is the y value of the source
! point.

Z                       ECHO("Move cursor to desired point and press ENTER ...")|CURSORON|MOVETO(SER2)|EVAL("ZBUILD(PPOS==1,GSERIES(CURPOS(SER1),GETPT(XVALS(SER1),CURPOS(SER1)),GETPT(SER1,CURPOS(SER1))))")|DEFMACRO("PPOS",PPOS+1,-1)|MOVETO(SER1)
ZBUILD(COND,SER)	IF(COND,TRANSPOSE(SER),CONCAT(CURR,TRANSPOSE(SER)))

!**********************************************************************!
!                                                                      !
!			  POINT REPLACEMENT			       !
!                                                                      !
!**********************************************************************!

!-----------------------------------------------------------------------
!
! CHANGEN replaces the points of a series with the points listed in a
! matrix of changes.  The format of the matrix is the same as that
! created by the N macro described above:  2 columns containing point
! numbers and y values.  N and CHANGEN can be used to modify points in
! a series by pointing to them with the cursor.
!
! Example: W2 contains the following matrix:
!
!          27  -1.552
!          45   3.773
!
! CHANGEN(W1,W2) replaces point 27 in window 1 with the value -1.552,
! and point 45 with the value 3.773.
!
!     SWIN = window with series to modify
!     NWIN = window with modification matrix in N format

CHANGEN(SWIN,NWIN)      SWIN;CHANGEFOR(1,LENGTH(NWIN),SETPT(CURR,ENTRY(NWIN,EVAL('N'),2),FLOOR(ENTRY(NWIN,EVAL('N'),1))))
CHANGEFOR(V,P,Q,FORM)   POFF;DEFMACRO(V,(P)-1,1);WHILE(EVAL(V)<Q,CHANGELOOP(V,FORM));PON
CHANGELOOP(V,FORM)      DEFMACRO(V,EVAL(V)+1,1);ECHO(STRCAT(V,' = ',STRNUM(EVAL(V))));FORM

!-----------------------------------------------------------------------
!
! CHANGEZ replaces the points of a series with the points listed in a
! matrix of changes.  The result of CHANGEZ is an x-y window, whether
! or not the original window is.  The format of of the matrix is the
! same as that created by the Z macro described above: 3 columns
! containing point numbers and x and y values.  Z and CHANGEZ can be
! used to modify points in a series by pointing to them with the
! cursor.
!
! Example: W2 contains the following matrix:
!
!          27   2.4  -1.552       
!          45	3.6   3.773       
!
! CHANGEZ(W1) replaces point 27 in window 1 with x-y pair (2.4,-1.552),
! and point 45 with the x-y pair (3.6, 3.773).
!
!     SWIN = window with series to modify
!     NWIN = window with modification matrix in Z format

CHANGEZ(SWIN,NWIN)	XY(XVALS(SWIN),YVALS(SWIN));CHANGEFOR(1,LENGTH(NWIN),XY(SETPT(XVALS(CURR),ENTRY(NWIN,EVAL('N'),2),FLOOR(ENTRY(NWIN,EVAL('N'),1))),SETPT(YVALS(CURR),ENTRY(NWIN,EVAL('N'),3),FLOOR(ENTRY(NWIN,EVAL('N'),1)))))

!**********************************************************************!
!                                                                      !
!		    CURSOR-BASED SUBSERIES EXTRACTION		       !
!                                                                      !
!**********************************************************************!

! Subseries-extraction macros create a matrix one or two columns at a
! time from a larger series using the cursors.  Each column in the
! matrix consists of points from the source series between the cursors.
!
! To use:
!
!     1. Depending on whether you are using the NN or ZZ macro, go to
!        the destination window and type the appropriate INIT command:
!        for example, to use NN, type INITNN("Ws"), where Ws is the
!        source window.  The window reference must be enclosed in
!        quotes.
!
!     2. Move to the source window and type NN or ZZ.
!
!     3. The first cursor will come up.  Move it to the right or left
!        side of the desired interval.
!
!     4. Press F9 to get the second cursor.  Move it to the other side
!        of the interval, and press ENTER twice to save the interval to
!        the destination window.
!
!     5. Repeat steps 2, 3 and 4 for as many subseries as you wish.

!-----------------------------------------------------------------------
!
! INITNN is used to initialize source and destination windows for use
! with the subseries matrix generation macro NN.  See directions above
! and the desription of NN.
!
!     SWIN = source window reference in quotes

INITNN(SWIN)		DEFMACRO("PPOS",1,-1)|DEFMACRO("SER1",SWIN,-1)|DEFMACRO("SER2",STRCAT('W',STRNUM(GETWNUM)),-1)|TABLEVIEW

!-----------------------------------------------------------------------
!
! NN, when used after INITNN, generates a matrix consisting of series
! extractions from the source window, using the two cursors in the 
! source window to delineate the area to be extracted.  Each series
! extraction goes into a separate column.  The extracted subseries
! contains the points on which the cursors are resting and all points
! in between.  The first two points in each column are the beginning
! and ending point numbers.  See the directions above.
!
! Example: The source window is the series 3.1, 5.2, 7.3, 9.4, 12.8, 
! 15.9.  On the first use of NN, the cursors are on point numbers 2 and
! 4; on the second use of NN, the cursors are on point numbers 1 and 3.
! The destination window contains the following matrix:
!
!    2     1
!    4     3
!    5.2   3.1
!    7.3   5.2
!    9.4   7.3

NN			ECHO("Move cursor, F9, move cursor, ENTER, ENTER ...")|CURSORON|MOVETO(SER2)|NNBUILD(EVAL("PPOS")==1,SER1)|DEFMACRO("PPOS",PPOS+1,-1)|MOVETO(SER1)
NNBUILD(COND,SER)	IF(COND,NNCOL(SER),RAVEL(CURR,NNCOL(SER)))
NNCOL(SER)		CONCAT(GSERIES(LEFTC(SER),RIGHTC(SER)),EXTRACT(SER,LEFTC(SER),DISTC(SER)+1))

!-----------------------------------------------------------------------
!
! INITZZ is used to initialize source and destination windows for use
! with the subseries matrix generation macro ZZ.  See directions above
! and the desription of ZZ.
!
!     SWIN = source window reference in quotes

INITZZ(SWIN)		DEFMACRO("PPOS",1,-1)|DEFMACRO("SER1",SWIN,-1)|DEFMACRO("SER2",STRCAT('W',STRNUM(GETWNUM)),-1)|TABLEVIEW

!-----------------------------------------------------------------------
!
! ZZ, when used after INITZZ, generates a matrix consisting of series
! extractions from the source window, using the two cursors in the 
! source window to delineate the area to be extracted.  Each series
! extraction generates two new columns in the target window: the first
! column contains the x values of the subseries, and the second column
! contains the y values.  The extracted subseries contains the points
! on which the cursors are resting and all points in between.  The
! first two points in each column are the beginning and ending point
! numbers.  See the directions above.
!
! Example: The source window contains the x values 0.0, 0.2, 0.4, 0.6,
! 0.8, and the y values 3.1, 5.2, 7.3, 9.4, 12.8, 15.9.  On the first
! use of ZZ, the cursors are on point numbers 2 and 4; on the second
! use of ZZ, the cursors are on point numbers 1 and 3.  The destination
! window contains the following matrix:
!
!    2     2     1     1
!    4     4     3     3
!    0.2   5.2   0.0   3.1
!    0.4   7.3   0.2   5.2
!    0.6   9.4   0.4   7.3

ZZ			ECHO("Move cursor, F9, move cursor, ENTER, ENTER ...")|CURSORON|MOVETO(SER2)|ZZBUILD(EVAL("PPOS")==1,SER1)|DEFMACRO("PPOS",PPOS+1,-1)|MOVETO(SER1)
ZZBUILD(COND,SER)	IF(COND,RAVEL(ZZCOL(SER,XVALS(SER)),ZZCOL(SER,YVALS(SER))),RAVEL(CURR,ZZCOL(SER,XVALS(SER)),ZZCOL(SER,YVALS(SER))))
ZZCOL(SER,ZSER)		CONCAT(GSERIES(LEFTC(SER),RIGHTC(SER)),EXTRACT(ZSER,LEFTC(SER),DISTC(SER)+1))

!**********************************************************************!
!                                                                      !
!			SUBSERIES REPLACEMENT			       !
!                                                                      !
!**********************************************************************!

!-----------------------------------------------------------------------
!
! CHANGENN replaces intervals of a series with columns from a matrix of
! changes.  The format of the matrix is the same as that created by the
! NN macro described above:  columns containing point numbers and y
! values.  NN and CHANGENN can be used to modify points in subseries
! of a series by pointing to them with the cursors.
!
! Example: W2 contains the following matrix:
!
!   22    49
!   24    51
!    5.2   3.1
!    7.3   8.2
!    9.4   6.3
!
! CHANGENN(W1,W2) replaces points 22 to 24 in window 1 with the values
! 5.2, 7.3, and 9.4; and it replaces points 49 to 51 with the values
! 3.1, 5.2, and 7.3.
!
!     SWIN = window with series to modify
!     NWIN = window with modification matrix in NN format

CHANGENN(SWIN,NWIN)	SWIN;CHANGEFOR(1,NUMCOLS(NWIN),COLFIX(CURR,COL(NWIN,EVAL('N'))))
COLFIX(SER,MATCOL)	CONCAT(EXTRACT(SER,1,FLOOR(GETPT(MATCOL,1))-1),EXTRACT(MATCOL,3,LENGTH(MATCOL)-2),EXTRACT(SER,FLOOR(GETPT(MATCOL,2))+1,LENGTH(SER)-FLOOR(GETPT(MATCOL,2))))

!-----------------------------------------------------------------------
!
! CHANGEZZ replaces intervals of a series with columns from a matrix of
! changes.  The result of CHANGEZ is an x-y window, whether or not the
! source window is.  The format of the matrix is the same as that
! created by the ZZ macro described above:  columns containing point
! numbers and x and y values.  ZZ and CHANGEZZ can be used to modify
! points in subseries of a series by pointing to them with the cursors.  
!
! Example: W2 contains the following matrix:
!
!   22    22    49    49
!   24    24    51    51
!    3.2   5.2   8.0   3.1
!    2.4   7.3   9.2   8.2
!    1.6   9.4  10.4   6.3
!
! CHANGEZZ(W1,W2) replaces point pairs 22 to 24 in window 1 with the
! x-y pairs (3.2, 5.2), (2.4, 7.3), and (1.6, 9.4); and it replaces
! point pairs 49 to 51 with the x-y pairs (8.0, 3.1), (9.2, 8.2), and
! (10.4, 6.3).
!
!     SWIN = window with series to modify
!     NWIN = window with modification matrix in ZZ format

CHANGEZZ(SWIN,NWIN)	XY(XVALS(SWIN),YVALS(SWIN));CHANGEFOR(1,FLOOR(NUMCOLS(NWIN)/2),XY(COLFIX(XVALS(CURR),COL(NWIN,FLOOR(2*EVAL('N')-1))),COLFIX(YVALS(CURR),COL(NWIN,FLOOR(2*EVAL('N'))))))

!-----------------------------------------------------------------------
