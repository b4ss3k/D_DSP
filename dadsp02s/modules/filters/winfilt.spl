/*****************************************************************************
*                                                                            *
*   WINFILT.SPL  Copyright (C) 1992-2005 DSP Development Corporation         *
*                               All Rights Reserved                          *
*                                                                            *
*   Author:      Randy Race                                                  *
*                                                                            *
*   Synopsis:    Kaiser Window Method of FIR Filter Design                   *
*                                                                            *
*   Revisions:    8 Mar 2005  RRR  Creation - from WINFILT.MAC               *
*                                                                            *
*****************************************************************************/

#include <series.h>

// Routines to create FIR digital filters using the Kaiser windowing method. 
// The impulse response of the ideal filter is multiplied by a Kaiser window 
// to produce a linear phase FIR filter.
//
// The resulting filter coefficients are identical to the impulse response
// of the filter. To filter data with these coefficents, use the FIRFILTER 
// function or the CONV function.
//
// For more information, see:
//
// [1] Oppenheim & Shafer
//     Discrete Time Signal Processing
//     Prentice Hall, 1989
//     pp. 444-462
//
// [2] Bateman & Yates   
//     Digital Signal Processing Design
//     Computer Science Press, 1989
//     pp. 190-195
//
// [3] Programs for Digital Signal Processing
//     IEEE Press, 1979
//     Section 5.2-1 - 5.2-19
//
//
// Although the functions generate filters using the same basic algorithm
// as detailed in [3], the input arguments in this implementation are 
// somewhat different.
//

// old macro definitions

#define klpass kwlpass
#define khpass kwhpass
#define kbpass kwbpass
#define kbstop kwbstop


//----------------------------------------------------------------------------
//
// KWLPASS(r, fp, fs, att, udc)      -     Kaiser lowpass filter
// r   -  sample rate of filter
// fp  -  pass band ending frequency (cutoff frequency),  0.0 < fp < r
// fs  -  stop band starting frequency,  fp < fs < r
// att -  stop band attenuation in dB
// udc -  string, "unity_dc" sets f(0) to 1.0
//
// Designs a lowpass filter using a Kaiser window. The filter is 
// non causal and time symmetric about t = 0 and the offset is equal to:
//
//                           - (length-1) / (rate * 2)
//
// Example:
// 
// Klpass(100, 20, 25, 60)
//
// Generates a 75 point lowpass filter with a pass band edge of 20 Hz and
// a stop band edge of 25 Hz. The stopband attenuation is 60 dB and the 
// time offset is -0.37 seconds.
//

kwlpass(order, r, fp, fs, att, udc) 
{
	local f;


	(order, r, fp, fs, att, udc) = kwlpass_args(order, r, fp, fs, att, udc);

	// generate sinc
	f = krsinx(order, r, fp, fs, att);

	// non-causal offset
	setxoffset(f, kroffset(length(f), r));

	// normalize so DC is 0
	if (strcmp("unity_dc", udc) == 0) {
		f = firunitydc(f);
	}

	return(f);
}


kwlpass_args(order, r, fp, fs, att, udc)
{
	if (not(IS_INTEGER(order))) {
		if (argc < 4) error("kwlpass - rate, fp, fs, att required");
		if (argc == 5) {
			udc = att;
		}
		else {
			udc = "non_unity_dc";
		}
		att = fs;
		fs = fp;
		fp = r;
		r = order;
		order = -1;
	}
	else if (argc < 5) {
		error("kwlpass - order, rate, fp, fs, att required");
	}
	else if (argc < 6) {
		udc = "non_unity_dc";
	}

	return(order, r, fp, fs, att, udc);
}



//----------------------------------------------------------------------------
//
// KWHPASS(r, fs, fp, att)      -     Kaiser highpass filter
// r   -  sample rate of filter
// fs  -  stop band starting frequency, 0.0 < fs < fp
// fp  -  pass band ending frequency (cutoff frequency), 0.0 < fp < r
// att -  stop band attenuation in dB
//
// Designs a highpass filter by subtracting a lowpass filter prototype from a
// delayed impulse and multiplying by result by a Kaiser window. The filter is 
// non causal and time symmetric about t = 0 and the offset is equal to:
//
//                           - (length-1) / (rate * 2)
//
// The resulting highpass filter always has an odd length.
//
// Example:
// 
// kwhpass(100, 20, 25, 60)
//
// Generates a 75 point bandpass filter with a pass band edge of 25 Hz and
// a stop band edge of 20 Hz. The stopband attenuation is 60 dB and the 
// time offset is -0.37 seconds.
//

kwhpass(order, r, fp, fs, att)
{
	local f;

	(order, r, fp, fs, att) = kwhpass_args(order, r, fp, fs, att);

	// odd order sinc
	f = krsinxodd(order, r, fp, fs, att);

	// subtract from impulse
	f = krimpulse(length(f), 1/r, krhlen(f)) - f;

	// offset and deltax
	setxoffset(f, kroffset(length(f), r));
	setdeltax(f, 1/r);

	return(f);
}

kwhpass_args(order, r, fp, fs, att)
{
	if (not(IS_INTEGER(order))) {
		if (argc < 4) error("kwhpass - rate, fp, fs, att required");
		att = fs;
		fs = fp;
		fp = r;
		r = order;
		order = -1;
	}
	else if (argc < 5) {
		error("kwhpass - order, rate, fp, fs, att required");
	}

	return(order, r, fp, fs, att);
}



//----------------------------------------------------------------------------
//
// KWBPASS(r, fs1, fp1, fp2, fs2, att)      -     Kaiser bandpass filter
// r    -  sample rate of filter
// fs1  -  first stop band frequency,  0.0 < fs1 < fp1
// fp1  -  first pass band frequency,  fs1 < fp1 < fp2
// fp2  -  second pass band frequency, fp1 < fp2 < fs2
// fs1  -  second stop band frequency, fp2 < fs2 < r
// att  -  stop band attenuation in dB
//
// Designs a bandpass filter by modulating a lowpass filter prototype with a
// cosine and multiplying by result by a Kaiser window. The filter is 
// non causal and time symmetric about t = 0 and the offset is equal to:
//
//                           - (length-1) / (rate * 2)
//
// Because the transition width is symmetric, the smallest width (i.e the 
// smaller of the fp-fs values) is used to design the filter.
//
// Example:
// 
// kwbpass(100, 15, 20, 30, 45, 60)
//
// Generates a 75 point bandpass filter with a center frequency of 25 Hz and
// the pass band begins at 20 Hz and ends at 30 Hz. The transition width is
// 5 Hz. The stopband attenuation is 60 dB and the time offset is -0.37 seconds.
//

kwbpass(order, r, fs1, fp1, fp2, fs2, att)
{
	local f;

	(order, r, fs1, fp1, fp2, fs2, att) = kwbpass_args(order, r, fs1, fp1, fp2, fs2, att);

	// design bandpass
	f = krbpass1(order, r, fs1, fp1, fp2, fs2, att);

	// non-causal offset 
	setxoffset(f, kroffset(length(f), r));
	setdeltax(f, 1/r);

	return(f);
}


kwbpass_args(order, r, fs1, fp1, fp2, fs2, att)
{
	if (not(IS_INTEGER(order))) {
		if (argc < 6) error("kwbpass - rate, fs1, fp1, fp2, fs2, att required");
		att = fs2;
		fs2 = fp2;
		fp2 = fp1;
		fp1 = fs1;
		fs1 = r;
		r = order;
		order = -1;
	}
	else if (argc < 7) {
		error("kwbpass - order, rate, fs1, fp1, fp2, att required");
	}

	return(order, r, fs1, fp1, fp2, fs2, att);
}



//----------------------------------------------------------------------------
//
// KWBSTOP(r, fs1, fp1, fp2, fs2, att)      -     Kaiser bandstop filter
// r    -  sample rate of filter
// fs1  -  first stop band frequency,  0.0 < fs1 < fp1
// fp1  -  first pass band frequency,  fs1 < fp1 < fp2
// fp2  -  second pass band frequency, fp1 < fp2 < fs2
// fs1  -  second stop band frequency, fp2 < fs2 < r
// att  -  stop band attenuation in dB
// udc  -  string, "unity_dc" sets f(0) to 1.0
//
// Designs a bandstop filter by subtracting a prototype bandpass filter from a
// delayed impulse and multiplying by result by a Kaiser window. The filter is 
// non causal and time symmetric about t = 0 and the offset is equal to:
//
//                           - (length-1) / (rate * 2)
//
// Because the transition width is symmetric, the smallest width (i.e the 
// smaller of the fp-fs values) is used to design the filter. The resulting 
// bandstop filter always has an odd length.
//
// Example:
// 
// kwbstop(100, 15, 20, 30, 45, 60)
//
// Generates a 75 point bandstop filter with a center frequency of 25 Hz and
// the stop band begins at 20 Hz and ends at 30 Hz. The transition width is
// 5 Hz. The stopband attenuation is 60 dB and the time offset is -0.37 seconds.
//

kwbstop(order, r, fs1, fp1, fp2, fs2, att, udc)
{
	local f;

	(order, r, fs1, fp1, fp2, fs2, att, udc) = kwbstop_args(order, r, fs1, fp1, fp2, fs2, att, udc);

	// design odd order bandstop
	f = krbpassodd(order, r, fs1, fp1, fp2, fs2, att);

	// subtract from impulse
	f = krimpulse(length(f), 1/r, krhlen(f)) - f;

	// non-causal offset
	setxoffset(f, kroffset(length(f), r));
	setdeltax(f, 1/r);

	// normalize so DC is 0
	if (strcmp("unity_dc", udc) == 0) {
		f = firunitydc(f);
	}

	return(f);
}

kwbstop_args(order, r, fs1, fp1, fp2, fs2, att, udc)
{
	if (not(IS_INTEGER(order))) {
		if (argc < 6) error("kwbstop - rate, fs1, fp1, fp2, fs2, att required");
		if (argc == 7) {
			udc = att;
		}
		else {
			udc = "non_unity_dc";
		}
		att = fs2;
		fs2 = fp2;
		fp2 = fp1;
		fp1 = fs1;
		fs1 = r;
		r = order;
		order = -1;
	}
	else if (argc < 7) {
		error("kwbstop - order, rate, fs1, fp1, fp2, att required");
	}
	else if (argc < 8) {
		udc = "non_unity_dc";
	}

	return(order, r, fs1, fp1, fp2, fs2, att, udc);
}

//----------------------------------------------------------------------------
// support routines

// even or odd length bandpass filter prototype - modulate a lowpass prototype
krbpass1(order, r, fs1, fp1, fp2, fs2, att)
{
	local f;

	f = krsinx(order, r, krwidth(fp1, fp2), krwidth(fp1, fp2) + 
		krtwidth(fs1, fp1, fs2, fp2), att);
	f = 2 * gkrcos(length(f), deltax(f), krfc(fp1, fp2)) * f;
	return(f);
}


// odd length bandpass filter prototype
krbpassodd(order, r, fs1, fp1, fp2, fs2, att)
{
	local f;

	f = krsinxodd(order, r, krwidth(fp1, fp2), krwidth(fp1, fp2) + 
		krtwidth(fs1, fp1, fs2, fp2), att);
	f = 2 * gkrcos(length(f), deltax(f), krfc(fp1, fp2)) * f;

	return(f);
}


// Kaiser sinx/x - ideal sinc multiplied by a Kaiser window
krsinx(order, r, fp, fs, att)
{
	local f;

	if (order <= 0) {
		order = krm(r, fp, fs, att);
	}

	f = (2 * krfc(fp, fs) / r) * 
		gkrwsinx(order, 1/r, krfc(fp, fs)) * gkaiser(order, 1/r, krbeta(att));

	return(f);
}


// Kaiser filter length
krm(r, fp, fs, att)
{
	local k;

	k = floor(r * (2+(att-8)) / (2.285 * abs(fp-fs) * 2 * pi));
	return(k);
}


// Odd Kaiser sinx/x
krsinxodd(order, r, fp, fs, att)
{
	local k;

	if (order <= 0) {
		order = krmodd(r, fp, fs, att);
	}

	// make odd 
	if (order % 2 == 0) order += 1;

	k =  (2 * krfc(fp, fs) / r) * gkrwsinx(order, 1/r, krfc(fp, fs)) * 
		gkaiser(order, 1/r, krbeta(att));

	return(k);
}


// Odd cosine
krcosodd(r, fp, fs, att)
{
	local k;

	k = gkrcos(krmodd(r, fp, fs, att), 1/r, krfc(fp, fs));
	return(k);
}

// Odd Kaiser filter length
krmodd(r, fp, fs, att)
{
	local k;

	k = int((krm(r, fp, fs, att)) / 2) * 2 + 1;
	return(k);
}


// Beta for Kaiser window
krbeta(att)
{
	local beta;

	if (att > 50) {
		beta = 0.1102 * (att - 8.7);
	}
	else if (att >= 21) {
		beta = 0.5842 * (att - 21)^0.4 + 0.07886 * (att - 21);
	}
	else {
		beta = 0.0;
	}
	return(beta);
}


// cutoff or center frequency
krfc(fp, fs)
{
	local k;

	k = abs((fp + fs) / 2);
	return(k);
}

// pass/stop band width
krwidth(fp1, fp2)
{
	local k;

	k = abs(fp2 - fp1) / 2;
	return(k);
}


// time offset of filter
kroffset(len, r)
{
	local k;

	k = (1 - len) / (2 * r);
	return(k);
}


// half length
krhlen(s)
{
	local k;

	k = int(1 + length(s) / 2);
	return(k);
}


// generate windowed sinx/x
gkrwsinx(len, dx, fc)
{
	local g;

	g = gsinc(len, dx, fc * 2 * pi, -fc * pi * dx * (len - 1));
	return(g);
}


// generate modulating cosine with proper phase
gkrcos(len, dx, fc)
{
	local g;

	g = gcos(len, dx, fc, -fc * pi * dx * (len - 1));
	return(g);
}


// return shortest transition width
krtwidth(fs1, fp1, fp2, fs2)
{
	local k;

	if (abs(fp1 - fs1) < abs(fs2 - fp2)) {
		k = abs(fp1 - fs1);
	}
	else {
		k = abs(fs2 - fp2);
	}
	return(k);
}

// Kaiser impulse
krimpulse(len, dx, noffset)
{
	local imp;

	// create impulse with integer offset
	imp = impulse(noffset, len);

	// deltax
	setdeltax(imp, dx);

	return(imp);
}


